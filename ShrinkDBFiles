--Get drives free space
xp_fixeddrives
 
 
--Find which are the largest tables that we might drop
SELECT
    t.NAME AS TableName,
    s.Name AS SchemaName,
    p.rows,
    SUM(a.total_pages) * 8 AS TotalSpaceKB,
    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,
    SUM(a.used_pages) * 8 AS UsedSpaceKB,
    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB,
    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,
    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
FROM
    sys.tables t
INNER JOIN     
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN
    sys.schemas s ON t.schema_id = s.schema_id
WHERE
    t.NAME NOT LIKE 'dt%'
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID > 255
GROUP BY
    t.Name, s.Name, p.Rows
ORDER BY
    TotalSpaceMB DESC, t.Name
 
 
 
--Get the script to shrink each db file
 
SELECT 'use [' + DB_NAME(sf.database_id) + '];' + 'DBCC SHRINKFILE (N''' + name + ''' , 0)'
FROM sys.master_files sf
WHERE sf.database_id > 4
      AND sf.type = 1
      AND EXISTS
(
    SELECT *
    FROM sys.databases d
    WHERE d.database_id = sf.database_id
          AND d.recovery_model_desc = 'SIMPLE'
);
 
--Shrinking in chuncks:
 
EXEC db_dba..usp_ShrinkInChunks
@dbname = 'db_name'
,@FileName = 'db_name'
,@MinSize = 10000
,@ChunckSizeMB  = 1024
,@UseTruncateOnly  = 0
